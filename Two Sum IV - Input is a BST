/* Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target. */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 
 /* In BST, order traversal will print the data in ascending order */
 
class Solution {
public:
    
    void inorder(TreeNode *root, vector<int> &nums) {
        if (root == nullptr)
            return;
        
        inorder(root->left, nums);
        nums.push_back(root->val);
        inorder(root->right, nums);
    }
    
    bool twoSum(vector<int> nums, int k) {
        int low = 0, high = nums.size()-1;
        
        while (low < high) {
            int sum = nums[low] + nums[high];
            
            if (sum == k)
                return true;
            else if(sum < k)
                low++;
            else
                high--;
        }
        
        return false;
    }
    
    bool findTarget(TreeNode* root, int k) {
        vector<int> nums;
        inorder(root, nums);
        
       // for(auto n:nums)
       //     cout<<n<<" ";
      //  cout<<endl;
        return (twoSum(nums, k));
    }
};
